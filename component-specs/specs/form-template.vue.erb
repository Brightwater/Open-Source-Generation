<template>
	<div id="container" v-if="$apolloData.queries.data.loading == false" class="form-widget">
		<div class="inner-form-widget">
			<DxForm
				id="form"
				:form-data="data.employee"
				
				label-location="top"
				>

				<DxGroupItem
					css-class="formGroup"
				>
					<% @input["columns"].each_with_index do |col, index| -%>
<DxSimpleItem
						data-field="<%= @input["columns"][index][0] %>"
						<% if(!@input["columns"][index][2].nil?) -%>editor-type="<%= @input["columns"][index][2] %>"
						v-if="dxSelectBoxOptions.dataSource[0]" != null
							:editor-options="<%= @input["columns"][index][2] %>Options"
						<% end -%>/>
					<% end -%>
					
				</DxGroupItem>
	
			</DxForm>
		</div>
			<button id="updateButton" @click="buttonClicked">Update</button>
	</div>
	<div v-else>
		<DxLoadIndicator
			id="large-indicator"
			:height="100"
			:width="100"
		/>
	</div>
</template>
 
<script>
	import { DxTextArea } from 'devextreme-vue/text-area';
	import { DxSelectBox } from 'devextreme-vue'
	import { DxLoadIndicator} from 'devextreme-vue/load-indicator';
	import gql from 'graphql-tag'
	import DxForm,
	{
		DxSimpleItem,
		DxGroupItem,
	} from 'devextreme-vue/form';

	export default 
	{	
		components:
		{
			DxForm,
			DxSimpleItem,
			DxGroupItem,
			DxTextArea,
			DxLoadIndicator,
			DxSelectBox,
		},
		
		apollo: {
            data: {
                query: gql`
                    query {
                        <%= @input["tableName"] %> {
                            <%= @queryElements %>
                        }
                    }`,

                update (data) {
					console.log(data.<%= @input["tableName"] %>[0])
					
					return {
						employee: data.<%= @input["tableName"] %>[0],
                    }
                },
            },
        },

		data()
		{
			return {
				employee: [],
				dxTextAreaOptions: { height: 90 }, // make the notes element bigger
				showIndicator: false,
				selectBoxDataSource: null,
				dxSelectBoxOptions: { dataSource: [null], acceptCustomValue: true},
			};
		},

		props: {
			mKey: {
				default: 0
			},
		},

		watch: {
			// wait for mKey to be updated
			mKey: function () {
				// don't update form unless the parent grid wants it to
				if (this.mKey != 0) {
					console.log(this.mKey)
					var data;
					var queryid = this.mKey;
					
					// manual query with variable queryid (mKey)
					this.$apollo.query({
						query: gql`
							query lookup($queryid: Int!) {
								<%= @input["tableName"] %> (where: {<%= @input["columns"][0][0] %>: {_eq: $queryid}}) {
									<%= @queryElements %>
								}
							}`,
						variables: {
							queryid: queryid,
						},
					}).then((response) =>
						this.data.employee = response.data.<%= @input["tableName"] %>[0] // update employee
					)	
				}
			}
		},

		methods:
		{
			buttonClicked() {

				// this part will look a bit messy in the template because of graphql formatting
				this.$apollo.mutate({
					mutation: gql` 
						mutation update (<% @input["columns"].each_with_index do |col,index| -%>$<%= @input["columns"][index][0] %>: <%= @input["columns"][index][1] %>, <% end -%>) {
							update_<%= @input["tableName"] %>(where: {<%= @input["columns"][0][0] %>: {_eq: $<%= @input["columns"][0][0] %>}}, 
							_set: {<% @input["columns"].each_with_index do |col,index| -%><% if @input["columns"][index][0] != @input["columns"][0][0] -%><%= @input["columns"][index][0] %>: $<%= @input["columns"][index][0] %>, <% end -%><% end -%>
}) {
								returning {
									<%= @queryElements %>   
								}
							}
						}`,
					variables: {
			<% @input["columns"].each_with_index do |col, index| -%>
			<%= @input["columns"][index][0] %>: this.data.employee.<%= @input["columns"][index][0] %>,
			<% end -%>
					},
				})
			}
		},

		<% @input["columns"].each_with_index do |col, index| -%>
		<% if(!@input["columns"][index][2].nil?) -%>

		mounted()
		{
			this.$apollo.query({
				query: gql`
					query {
						<%= @input["tableName"] %> (distinct_on: <%= @input["columns"][index][0] %>) {
							<%= @input["columns"][index][0] %>
						}
					}`,
				}).then((response) =>
					this.dxSelectBoxOptions.dataSource = response.data.<%= @input["tableName"] %>.map(value => value.<%= @input["columns"][index][0] %>) // update employee
				)	
			}
			<% break %>
		<% end -%>
		<% end -%>
	
	};

	
	
</script>

<style>
html {
	font-family: 'Helvetica Neue','Segoe UI', 'Helvetica', 'Verdana', 'sans-serif';
	line-height: 1.35715;
}
</style>

<style scoped>
.dx-widget {
	display: inline-block;
	width: 100%;
}

#container {
	overflow: auto;
}

.customlabel {
	padding-top: 10px;
}

button {
	padding-left: 7px;
	padding-right: 7px;
	padding-top: 3px;
	padding-bottom: 3px;
	margin-top: 0.2em;	
	float: right;
	border-radius: 5px;
	background-color: rgba(191, 191, 191, 0.15);
	border: 2px solid #d2d3d5;
}

.inner-form-widget{
	background-color: rgba(191, 191, 191, 0.15);
	border: 2px solid #d2d3d5;
	padding: 15px;
}

.form-widget {
	margin-left: 35%;
	margin-right: 35%;
	min-width: 200px;
}

#large-indicator {
	vertical-align: middle;
	margin-right: 10px;
	padding: 30px;
}
</style>
